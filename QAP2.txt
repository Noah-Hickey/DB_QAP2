QAP 2 - SD 12
Noah Hickey

Problem 1: University Course Enrollment

Student Table 
======================================================================

CREATE TABLE students (
id SERIAL PRIMARY KEY,
first_name VARCHAR(50) NOT NULL,
last_name VARCHAR(50) NOT NULL,
email VARCHAR(100) NOT NULL,
school_enrollment_date DATE NOT NULL
);
======================================================================

Professor Table
======================================================================

CREATE TABLE professors (
id SERIAL PRIMARY KEY,
first_name VARCHAR(50) NOT NULL,
last_name VARCHAR(50) NOT NULL,
department VARCHAR(100) NOT NULL
);
======================================================================

Courses Table
======================================================================

CREATE TABLE courses (
id SERIAL PRIMARY KEY,
course_name VARCHAR(50) NOT NULL,
course_description TEXT,
professor_id INT NOT NULL,
FOREIGN KEY (professor_id) REFERENCES professors(id)
);
======================================================================

Enrollments Table
======================================================================

CREATE TABLE enrollments (
student_id INT NOT NULL,
course_id INT NOT NULL,
enrollment_date DATE NOT NULL,
PRIMARY KEY (student_id,course_id),
FOREIGN KEY (student_id) REFERENCES students(id),
FOREIGN KEY (course_id) REFERENCES courses(id)
);
======================================================================


Insertions into students table
===============================================================================================

INSERT INTO students (id, first_name, last_name, email, school_enrollment_date)
VALUES 
    ('1001', 'Nathaniel', 'Price', 'natprice@yahoo.com', '2023-09-12'),
	('1002', 'Grace', 'Hickman', 'grhick99@outlook.com', '2023-09-13'),
	('1003', 'Pope', 'Hartman', 'popeheart@yahoo.com', '2024-10-01'),
	('1004', 'Kimberley', 'Watson', 'kimberleywats@gmail.com', '2025-01-05'),
	('1005', 'Jack', 'Goodyear', 'jackgoodyear243@hotmail.com', '2025-01-05');
===============================================================================================

Insertions into professors table
===============================================================================================
INSERT INTO professors (id, first_name, last_name, department)
VALUES 
    ('101', 'Kenny', 'Benson', 'Mathematics'),
	('102', 'Tara', 'McConnor', 'Anthropology'),
	('103', 'Lucille', 'Batts', 'Chemistry');
===============================================================================================

Insertions into courses table
===============================================================================================
INSERT INTO courses (id, course_name, course_description, professor_id)
VALUES 
    ('101', 'Physics 101', 'Learning the basics of Pyhsics.', '103'),
	('102', 'Mathematics 102', 'Learning fundamentals of Math.', '101'),
	('103', 'Intro to Anthropology 103', 'Learning about the fundamentals of Anthropology.', '102');
===============================================================================================

Enroll students into classes
===============================================================================================
INSERT INTO enrollments (student_id, course_id, enrollment_date)
VALUES
	(1001, 101, '2025-02-04'), 
    (1002, 102, '2025-02-05'), 
    (1003, 103, '2025-02-05'), 
    (1004, 101, '2025-02-08'),
	(1004, 102, '2025-02-08'),
    (1005, 102, '2025-02-09');
===============================================================================================

Retrieve names of students enrolled in Physics 101 - Got help with ChatGPT for this.
===============================================================================================
SELECT CONCAT(first_name, ' ', last_name) AS full_name
FROM students
JOIN enrollments ON student_id = student_id
JOIN courses ON course_id = course_id
WHERE course_name = 'Physics 101';
===============================================================================================

Retrieve names of all professors - Got help with ChatGPT for this.
===============================================================================================
SELECT courses.course_name, CONCAT(professors.first_name, ' ', professors.last_name) AS professor_full_name
FROM courses
JOIN professors ON courses.professor_id = professors.id;
===============================================================================================

Retrieve all courses that have students enrolled in them. - Got help with ChatGPT for this.
===============================================================================================
SELECT courses.course_name
FROM courses
JOIN enrollments ON courses.id = enrollments.course_id;
===============================================================================================

Update student email
===============================================================================================
UPDATE students
SET email = 'kimbwat@gmail.com'
WHERE first_name = 'Kimberley' AND last_name = 'Watson';
===============================================================================================

Remove a student from one of their courses
===============================================================================================
DELETE FROM enrollments
WHERE student_id = '1003'
===============================================================================================



Problem 2: Online Store Inventory and Orders System

Create Products Table
===============================================================================================
CREATE TABLE products (
id SERIAL PRIMARY KEY,
product_name VARCHAR(50) NOT NULL,
price DECIMAL(10,2) NOT NULL,
stock_quantity INT NOT NULL
);
===============================================================================================

Create Customers Table
===============================================================================================
CREATE TABLE customers (
id SERIAL PRIMARY KEY,
first_name VARCHAR(50) NOT NULL,
last_name VARCHAR(50) NOT NULL,
email VARCHAR(100) NOT NULL
);
===============================================================================================

Create Orders Table
===============================================================================================
CREATE TABLE orders (
id SERIAL PRIMARY KEY,
customer_id INT NOT NULL,
FOREIGN KEY (customer_id) REFERENCES customers(id),
order_date DATE NOT NULL
);
===============================================================================================

Create Order Items Table
===============================================================================================
CREATE TABLE order_items (
order_id SERIAL, 
FOREIGN KEY (order_id) REFERENCES orders(id),
product_id SERIAL,
FOREIGN KEY (product_id) REFERENCES products(id),
quantity INT NOT NULL,
PRIMARY KEY (order_id, product_id)
);
===============================================================================================

Inserting Data
===============================================================================================
INSERT INTO products (id, product_name, price, stock_quantity)
VALUES 
    ('001','Basic Laptop','350.00','75'),
	('002','High-End Laptop','880.50','50'),
	('003','Basic Desktop PC','545.00','68'),
	('004','Smart Tablet','500.00','40'),
	('005','Keyboard & Mouse','80.00','90'),
	('006','Screen Cleaner','20.00','84');

INSERT INTO customers (id, first_name, last_name, email)
VALUES 
    ('001','Barry','Hill','barhill23@hotmail.com'),
	('002','Jennifer','Martinez','Jen.Martinez07@outlook.com'),
	('003','Shane','McDonald','shmcdonald0202@yahoo.com'),
	('004','Darius','Russell','Darius_Russell@gmail.com');

INSERT INTO orders (customer_id, order_date) 
VALUES 
    (1, '2024-02-10'),
    (2, '2024-02-11'),
    (3, '2024-02-12'),
    (4, '2024-02-13'),
    (1, '2024-02-14');

INSERT INTO order_items (order_id, product_id, quantity)
VALUES 
    (1, 1, 2),  
    (1, 5, 1),  
    (2, 2, 1),  
    (2, 3, 1),  
    (3, 4, 2),  
    (3, 6, 3),  
    (4, 3, 1),  
    (4, 5, 2),  
    (5, 2, 1),  
    (5, 4, 1);  
===============================================================================================

Get names and stock quantities of products
===============================================================================================
SELECT product_name, stock_quantity
FROM products;
===============================================================================================


Get product name and quantity for an order - Order 3 returned 2 smart tablets and 3 screen cleaners.
======================================================================================================
SELECT product_name, quantity
FROM order_items
JOIN products ON product_id = id
WHERE order_id = 003;

======================================================================================================

Get all orders placed by a customer - Chat GPT helped explain to me about this one.
======================================================================================================
SELECT orders.id AS order_id, 
       order_items.product_id, 
       products.product_name, 
       order_items.quantity
FROM orders
JOIN order_items ON orders.id = order_items.order_id
JOIN products ON order_items.product_id = products.id
WHERE orders.customer_id = 1;
======================================================================================================

Updates to simulate the reduction of stock
======================================================================================================
UPDATE products
SET stock_quantity = stock_quantity - (
    SELECT quantity FROM order_items 
    WHERE order_items.product_id = products.id
    AND order_items.order_id = 1
)
WHERE EXISTS (
    SELECT 1 FROM order_items 
    WHERE order_items.product_id = products.id
    AND order_items.order_id = 1
);
======================================================================================================

Deletes Order 1 - Had to do order_items first as to not conflict with keys.
======================================================================================================

DELETE FROM order_items WHERE order_id = 1;

DELETE FROM orders WHERE id = 1;

======================================================================================================